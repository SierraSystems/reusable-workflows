on:
  workflow_call:
    inputs:
      build_config_name:
        description: |
          Name of the BuildConfig that will be triggered. We assume that the Image will also have the same name
        type: string
        required: true
      source_image_tag:
        description: |
          The tag the build config will initially create
        type: string
        required: false
        default: trivy
    secrets:
      openshift_namespace:
        required: true
      openshift_server_url:
        required: true
      openshift_token:
        required: true
      openshift_external_repository:
        required: true

jobs:
  build-scan:
    name: Build & Scan Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.openshift_server_url }}
          openshift_token: ${{ secrets.openshift_token }}
          namespace: ${{ secrets.openshift_namespace }}
        
      - name: Trigger Build Config
        run: oc start-build ${{ inputs.build_config_name }} --wait

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'image-registry.apps.silver.devops.gov.bc.ca/91beaa-tools/bc-paris-api'
          format: template
          template: '@/contrib/sarif.tpl'
          output: trivy-results.sarif
          exit-code: '1'
          ignore-unfixed: true
          severity: HIGH,CRITICAL

      #Upload results to the Github security tab.
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: trivy-results.sarif
